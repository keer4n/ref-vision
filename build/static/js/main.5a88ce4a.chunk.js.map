{"version":3,"sources":["serviceWorker.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","ResultItem","title","author","doi","Result","props","drawGraph","x","a","alert","fetch","then","resp","json","res","console","log","setState","gotGraph","state","bind","style","padding","textAlign","this","graphJson","results","map","r","onClick","e","preventDefault","key","React","Component","Graph","SearchBar","useState","query","setQuery","type","onChange","target","value","Search","fetchResults","encodeURIComponent","result","gotResults","ReactDOM","render","theme","createTheme","node","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"uPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCVAC,EAAa,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,OAAiB,EAATC,IAElC,OAAQ,4BACGF,EAAM,6BACNC,IAQPE,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAQPC,UATiB,uCASL,WAAMC,GAAN,eAAAC,EAAA,6DACVC,MAAMF,GADI,SAEMG,MAAM,gBAAgBH,GAC1BI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAHpB,OAEPC,EAFO,OAIXC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZC,UAAU,IAND,2CATK,sDAEhB,EAAKC,MAAQ,CACXD,UAAU,GAEZ,EAAKZ,UAAY,EAAKA,UAAUc,KAAf,gBALD,E,qDAoBR,IAAD,OACL,OACE,kBAAC,UAAD,CAASC,MAAO,CAACC,QAAS,IAAKC,UAAW,SACzCC,KAAKL,MAAMD,SAAW,kBAAC,EAAD,CAAOL,KAAMW,KAAKnB,MAAMoB,YAC7C,4BACMD,KAAKnB,MAAMqB,QAAQC,KACrB,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYC,QAAS,SAACC,GAAOA,EAAEC,iBAAkB,EAAKzB,UAAUsB,EAAEzB,MAAQ6B,IAAKJ,EAAEzB,IAAKF,MAAO2B,EAAE3B,MAAOC,OAAQ0B,EAAE1B,OAAQC,IAAKyB,EAAEzB,e,GA3B7H8B,IAAMC,WAsCrBC,E,uKAEF,OACE,yC,GAHcF,IAAMC,WAQ1B,SAASE,IAAa,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,KAGjB,OACA,6BACA,2BACEC,KAAK,OACLC,SAAU,SAACX,GAAOS,EAAST,EAAEY,OAAOC,UAErC,6BAAK,6BACL,kBAAC,EAAD,CAAQL,MAAOA,K,IAMdM,E,kDAEJ,WAAYvC,GAAO,IAAD,8BAChB,cAAMA,IAQRwC,aATkB,sBASH,4BAAArC,EAAA,sEACIE,MAAM,UAAUoC,mBAAmB,EAAKzC,MAAMiC,QAClD3B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAFlB,OACTC,EADS,OAGbC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZ8B,OAAQjC,EACRkC,YAAY,IAND,2CAPb,EAAK7B,MAAQ,CACX4B,OAAQ,GACRC,YAAY,GAEd,EAAKH,aAAe,EAAKA,aAAazB,KAAlB,gBANJ,E,qDAmBT,IAAD,OACN,OACI,6BACI,kBAAC,SAAD,CAAQoB,KAAK,SAASX,QACpB,WACE,EAAKgB,iBAFT,WAMDrB,KAAKL,MAAM6B,WAAa,kBAAC,EAAD,CAAQtB,QAASF,KAAKL,MAAM4B,SAAY,U,GA9BtDd,IAAMC,WAqC3Be,IAASC,OACP,kBAAC,gBAAD,CAAeC,MAAOC,yBAChB,kBAAC,QAAD,KACE,yBAAK/B,MAAO,CAACE,UAAW,WACxB,kBAAC,IAAD,CAAS8B,KAAK,MAAd,cACA,kBAAC,UAAD,KACE,kBAACjB,EAAD,UAKVkB,SAASC,eAAe,SDCpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.5a88ce4a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ThemeProvider, Arwes, createTheme, Content, Button} from 'arwes';\nimport Heading from 'arwes/lib/Heading';\n\nconst ResultItem = ({title, author, doi}) => {\n\n  return (<li>         \n            {title}<br/>\n            {author}  \n        </li>\n        )\n}\n\n\n\n\nclass Result extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      gotGraph: false\n    }\n    this.drawGraph = this.drawGraph.bind(this);\n  }\n\n  \n   drawGraph = async(x) => {\n     alert(x);\n    let res =  await fetch(\"/api/g?query=\"+x)\n                .then(resp => resp.json());\n    console.log(res);\n    this.setState({\n      gotGraph: true\n    })\n    }\n    \n  \n  render() {    \n      return (\n        <Content style={{padding: 100, textAlign: \"left\"}}>\n        {this.state.gotGraph ? <Graph json={this.props.graphJson}/> :\n          <ol>\n               {this.props.results.map(\n              r => <ResultItem onClick={(e) => {e.preventDefault(); this.drawGraph(r.doi)}}  key={r.doi} title={r.title} author={r.author} doi={r.doi}/>\n              )}\n            \n          </ol>\n               }\n          </Content>\n    )\n    \n  }\n}\n\nclass Graph extends React.Component {\n  render(){\n    return (\n      <h1>Graph</h1>\n    )\n  }\n}\n\nfunction SearchBar() {\n  const [query, setQuery] = useState(\"\");\n  \n    return (\n    <div>\n    <input \n      type=\"text\" \n      onChange={(e) => {setQuery(e.target.value)}}\n     />\n     <br/><br/>\n     <Search query={query}/>\n     </div>\n    )\n  \n}\n\nclass Search extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      result: \"\",\n      gotResults: false\n    }\n    this.fetchResults = this.fetchResults.bind(this);\n  }\n\n  fetchResults = async() => {\n    let res =  await fetch(\"/api/s/\"+encodeURIComponent(this.props.query))\n                .then(resp => resp.json());\n    console.log(res);\n    this.setState({\n      result: res,\n      gotResults: true\n    })\n  }\n\n  render(){\n    return (\n        <div>\n            <Button type=\"submit\" onClick={\n              () => {\n                this.fetchResults()\n              }\n            }> Search</Button>\n          \n          {this.state.gotResults ? <Result results={this.state.result}/> : null}\n          </div>\n          \n    )\n  }\n}\n\nReactDOM.render(\n  <ThemeProvider theme={createTheme()}>\n        <Arwes>\n          <div style={{textAlign: \"center\"}}>\n          <Heading node='h1'>REF-VISION</Heading>\n          <Content>\n            <SearchBar /> \n          </Content>\n          </div>\n        </Arwes>\n      </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}